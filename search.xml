<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux添加用户和管理员权限</title>
    <url>/2025/04/23/Linux%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E5%92%8C%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<p>Linux 的添加用户和赋予管理员权限命令以后会时不时用到，故专门开一期博客来记录一下（以下全部基于 Ubuntu 系统）。</p>
<span id="more"></span>

<h2 id="添加新用户"><a href="#添加新用户" class="headerlink" title="添加新用户"></a>添加新用户</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加一个名为newuser的新用户，并自动在/home/下创建用户目录</span></span><br><span class="line">sudo useradd -m newuser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定home目录位置则添加-d</span></span><br><span class="line">sudo useradd -m -d /path/to/home/newuser newuser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置初始密码（会要求输入两次密码）</span></span><br><span class="line">sudo passwd newuser</span><br></pre></td></tr></table></figure>

<h2 id="管理员权限操作"><a href="#管理员权限操作" class="headerlink" title="管理员权限操作"></a>管理员权限操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前管理员权限用户</span></span><br><span class="line">grep -Po <span class="string">&#x27;^sudo.+:\K.*$&#x27;</span> /etc/group</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加newuser管理员权限，参数“-aG”表示追加到指定组，不移除原有成员</span></span><br><span class="line">sudo usermod -aG sudo newuser</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">sudo adduser newuser sudo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除newuser管理员权限</span></span><br><span class="line">sudo deluser newuser sudo</span><br></pre></td></tr></table></figure>

<p><strong>注：管理员权限在指定用户账户下终端重启后生效。</strong></p>
<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除用户user及其家目录</span></span><br><span class="line">sudo userdel -r user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看用户user信息</span></span><br><span class="line"><span class="built_in">id</span> user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换为用户user，加“-”表示带环境变量一起切换（若user为管理员，也可以使用sudo登录）</span></span><br><span class="line">su - user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前用户名</span></span><br><span class="line"><span class="built_in">whoami</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改当前用户密码</span></span><br><span class="line">passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用sudo更改其他用户密码</span></span><br><span class="line">sudo passwd username</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建root密码</span></span><br><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure>

<h2 id="补充1——修改用户路径权限"><a href="#补充1——修改用户路径权限" class="headerlink" title="补充1——修改用户路径权限"></a>补充1——修改用户路径权限</h2><p><u><strong>使用 ls -l 命令查看文件与目录的详细信息。</strong></u></p>
<p>以 drwxr-xr-x 为例：</p>
<ul>
<li>d 代表这是目录</li>
<li>rwx 代表所有者的权限是：读、写、执行</li>
<li>r-x 代表所属组的权限是：读、执行</li>
<li>r-x 代表其他用户的权限是：读、执行</li>
</ul>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><table>
<thead>
<tr>
<th>角色</th>
<th>符号</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>所有者</td>
<td>u</td>
<td>创建者或指定用户</td>
</tr>
<tr>
<td>所属组</td>
<td>g</td>
<td>关联的用户组</td>
</tr>
<tr>
<td>其他用户</td>
<td>o</td>
<td>系统中除所有者和所属组外的用户</td>
</tr>
<tr>
<td>所有用户</td>
<td>a</td>
<td>u + g + o</td>
</tr>
</tbody></table>
<p>权限一共三种：读（r）、写（w）、执行（x）</p>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="符号模式"><a href="#符号模式" class="headerlink" title="符号模式"></a>符号模式</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> [选项] 权限模式 文件名/目录名</span><br><span class="line"><span class="comment"># 选项：-R，递归修改目录下的所有文件及子目录</span></span><br><span class="line"><span class="comment"># 权限模式：角色&amp;操作（增、减、等于），例如u+w、o-x、g=rx等</span></span><br></pre></td></tr></table></figure>

<h4 id="八进制模式"><a href="#八进制模式" class="headerlink" title="八进制模式"></a>八进制模式</h4><p>读 r &#x3D; 4、写 w &#x3D; 2、执行 x &#x3D; 1，累加起来就是权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> [选项] 权限组合 文件名/目录名</span><br><span class="line"><span class="comment"># 选项：-R，递归修改目录下的所有文件及子目录</span></span><br><span class="line"><span class="comment"># 例如 chmod 755 path，意为path路径下，所有者可读写执行，其他用户仅可读和执行。</span></span><br></pre></td></tr></table></figure>

<h2 id="补充2——修改所有者和所属组"><a href="#补充2——修改所有者和所属组" class="headerlink" title="补充2——修改所有者和所属组"></a>补充2——修改所有者和所属组</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> [选项] 新所有者:新所属组 文件名/目录名</span><br><span class="line"><span class="comment"># 选项：-R，递归修改目录下的所有文件及子目录</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Linux系统下的CUDA多版本共存</title>
    <url>/2025/04/23/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84CUDA%E5%A4%9A%E7%89%88%E6%9C%AC%E5%85%B1%E5%AD%98/</url>
    <content><![CDATA[<p>实验室的机器原本只有 12.0 版本的 CUDA（最近我才把 11.8 版本的传到 &#x2F;usr&#x2F;local 路径下），这给配环境带来了很大不便。之前也碰到过 CUDA 多版本共存的问题，但是很长时间不用会忘记，整体流程还是挺复杂的，因此必须专门写一篇笔记记录一下。</p>
<span id="more"></span>

<h2 id="前言——关于-CUDA-版本的小-tips"><a href="#前言——关于-CUDA-版本的小-tips" class="headerlink" title="前言——关于 CUDA 版本的小 tips"></a>前言——关于 CUDA 版本的小 tips</h2><p>其实，检测到的 CUDA 版本和用于编译 PyTorch 的 CUDA 版本是可以有一定容错率的，这种版本错配问题一般在安装需要编译的模块时出现。</p>
<p>经不完全实验，例如检测到的是 12.3 版本，而用于编译的是 12.1 版本，其实大概率是不会有问题的。然而，假设检测到的是 12.3 版本，而用于编译的是 11.x 版本，则不保证不会出问题（<strong>如 12.4 和 11.8 版本是肯定会报错的</strong>）。因此，在配版本的时候尽量避免大版本错配。</p>
<h2 id="安装-CUDA-Toolkit"><a href="#安装-CUDA-Toolkit" class="headerlink" title="安装 CUDA Toolkit"></a>安装 CUDA Toolkit</h2><p>可以事先查询一下驱动和 CUDA 版本之间的适配关系（一般不需要）。可查询 <a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html">Nvidia 官方文档</a>。</p>
<p>进入 <a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDA Toolkit 发布页</a>，查看需要安装的版本。</p>
<p>之后，跟随指引选择操作系统版本，注意使用 runfile(local) 安装。<strong>若要更改安装路径，在运行 sh 命令时，在后面添加 –installpath&#x3D;&#x2F;path&#x2F;to&#x2F;cuda-xx.x 参数即可。</strong></p>
<p>安装过程中，可能会出现以下界面（参考图），选择“Continue”即可。</p>
<p><img src="/2025/04/23/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84CUDA%E5%A4%9A%E7%89%88%E6%9C%AC%E5%85%B1%E5%AD%98/fig1.png" alt="fig1"></p>
<p>接下来在安装时，按照如下选项安装（参考图），把驱动取消勾选。</p>
<p><img src="/2025/04/23/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84CUDA%E5%A4%9A%E7%89%88%E6%9C%AC%E5%85%B1%E5%AD%98/fig2.png" alt="fig2"></p>
<p>最后，当已经有软链接存在的情况下，还会出现如下提示：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">A symlink already exists at /usr/local/cuda. Update to this installation?</span><br></pre></td></tr></table></figure>

<p>这是更改软链接的提示，一般选择<strong>不更改</strong>。如果是实验室服务器场景，软链接的更改是风险很大的，因为会影响到所有用户。如果是自己的机器，则无所谓。</p>
<h3 id="软链接修改"><a href="#软链接修改" class="headerlink" title="软链接修改"></a>软链接修改</h3><p>如果要修改软链接，则执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除原软链接</span></span><br><span class="line">sudo <span class="built_in">rm</span> -rf /usr/local/cuda</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加新软链接（可以通过nvcc检查是否修改成功）</span></span><br><span class="line">sudo <span class="built_in">ln</span> -s /path/to/cuda-xx.x /usr/local/cuda</span><br></pre></td></tr></table></figure>

<h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p><strong>本人曾经碰到过修改 .bashrc 造成错误，只能修改 .zshrc 的情况。因此，如果碰到类型场景，两个文件可以都试试。</strong></p>
<p>在配置文件末尾追加如下语句后使用 source 命令生效。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CUDA_HOME=<span class="string">&quot;/path/to/cuda-xx.x&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$CUDA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$CUDA_HOME</span>/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>

<h3 id="关于配置环境变量的一些说明"><a href="#关于配置环境变量的一些说明" class="headerlink" title="关于配置环境变量的一些说明"></a>关于配置环境变量的一些说明</h3><p>本人曾经有看到在 CUDA_HOME 变量中添加冒号的写法，这种写法我感觉是有问题的，因为冒号在配置中是“追加”的作用，所以那样就会造成多路径共存的情况，导致指向出现混淆。因此，在配置 CUDA_HOME 时，最好使用双引号的写法，<strong>而另外两个环境变量千万不能使用双引号，否则会将原有路径全部覆盖！</strong></p>
]]></content>
  </entry>
  <entry>
    <title>PyTorch环境配置笔记</title>
    <url>/2024/12/08/PyTorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>每次跑深度学习代码之前，配环境都是令人头疼的一件事，为了便于以后排查错误，将一些基本概念和常见问题整理了出来。</p>
<span id="more"></span>

<h2 id="显卡"><a href="#显卡" class="headerlink" title="显卡"></a>显卡</h2><p>不是所有的GPU都支持CUDA，CUDA是NVIDIA推出的。一般用的都是NVIDIA的卡，所以应该不会碰到这个问题。</p>
<h2 id="显存"><a href="#显存" class="headerlink" title="显存"></a>显存</h2><p>显存之于GPU，就像内存之于CPU。</p>
<h2 id="显卡驱动（特指NVIDIA-Driver）"><a href="#显卡驱动（特指NVIDIA-Driver）" class="headerlink" title="显卡驱动（特指NVIDIA Driver）"></a>显卡驱动（特指NVIDIA Driver）</h2><p>显卡驱动是连接显卡和计算机的桥梁，方便计算机识别GPU是否正确安装。NVIDIA Driver是NVIDIA显卡驱动软件，这个版本一般是和显卡型号相关的。</p>
<h2 id="CUDA"><a href="#CUDA" class="headerlink" title="CUDA"></a>CUDA</h2><p>CUDA的全称是Compute Unified Device Architecture（统一计算设备架构），属于一种并行计算平台和编程模型，能使GPU更简单地进行通用计算。运行CUDA应用程序要求系统至少有<strong>一个具有CUDA功能的GPU</strong>和<strong>与CUDA Toolkit兼容的驱动程序</strong>。</p>
<p>CUDA的安装路径一般在：&#x2F;usr&#x2F;local&#x2F;cuda-xx.x&#x2F;（xx.x为版本号）一个系统中可以安装多个CUDA版本，使用时修改软链接即可。</p>
<p>查看显卡支持的最高CUDA版本（驱动API）：</p>
<p><code>nvidia-smi</code></p>
<p>CUDA多版本切换（有管理员权限）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将~/.bashrc下与CUDA相关的路径都改为/usr/local/cuda，不添加版本号</span></span><br><span class="line"><span class="built_in">rm</span> -rf /usr/local/cuda  <span class="comment"># 删除旧的软链接</span></span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/cuda-xx.x /usr/local/cuda  <span class="comment"># 添加新的软链接</span></span><br><span class="line">nvcc -V  <span class="comment"># 检查当前版本</span></span><br></pre></td></tr></table></figure>

<p>查询GPU算力：<a href="https://developer.nvidia.com/cuda-gpus#compute">官方算力表</a></p>
<p>GPU算力和CUDA版本对应关系：<a href="https://en.wikipedia.org/wiki/CUDA#GPUs_supported">速查表</a></p>
<h3 id="cuDNN"><a href="#cuDNN" class="headerlink" title="cuDNN"></a>cuDNN</h3><p>cuDNN是一个专为深度学习设计的软件库，里面提供了很多计算函数，如卷积。cuDNN与CUDA的关系好比是工具和工作台，安装了CUDA相当于只买来了一个平台，并没有提供专为深度神经网络加速的工具，因此还需要安装cuDNN。cuDNN是插入式设计，因此安装的时候只需要把cuDNN相关文件直接复制到CUDA路径中即可。</p>
<p><a href="https://docs.nvidia.com/deeplearning/sdk/cudnn-install/">官网综述链接</a></p>
<p>注：cuDNN和CUDA的版本存在一定对应关系，但是一般到了11以上的版本就不太会出现冲突了。<a href="https://developer.nvidia.com/rdp/cudnn-archive">详见官网</a></p>
<h3 id="CUDA-Toolkit"><a href="#CUDA-Toolkit" class="headerlink" title="CUDA Toolkit"></a>CUDA Toolkit</h3><p>CUDA Toolkit主要包含了CUDA-C和CUDA-C++编译器、一些实用程序库、library API的代码示例和一些CUDA开发工具。一般安装CUDA Toolkit都是默认安装了CUDA Driver的，<strong>需要关注的是，CUDA Toolkit和在Anaconda中安装torch时自动安装的cudatoolkit有一定区别</strong>。CUDA Toolkit的功能更加完整，只有在进行其他CUDA相关程序的编译时才会用到，和项目的环境需求有关。安装PyTorch的时候，cudatoolkit包含了与CUDA相关的动态链接库，PyTorch本身与CUDA相关的部分是预编译好的，不需要重新执行编译过程。</p>
<p><a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html#major-components">官网综述链接</a></p>
<p>注：CUDA Toolkit和CUDA Driver的版本存在一定对应关系。<a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html">详见官网</a></p>
<h3 id="NVCC"><a href="#NVCC" class="headerlink" title="NVCC"></a>NVCC</h3><p>NVCC是CUDA的编译器，一般存放在CUDA Toolkit的&#x2F;bin目录中，类似于C语言的gcc编译器。</p>
<p>查看当前CUDA版本（运行API）：</p>
<p><code>nvcc -V</code></p>
<p>此命令无效时检查环境变量是否配好：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line">sudo gedit ~/.bashrc</span><br><span class="line"><span class="comment"># 添加如下信息</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/cuda-xx.x/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">&quot;/usr/local/cuda-xx.x/lib64:<span class="variable">$LD_LIBRARY_PATH</span>&quot;</span></span><br><span class="line"><span class="comment"># 关闭文件，使之生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="PyTorch和CUDA"><a href="#PyTorch和CUDA" class="headerlink" title="PyTorch和CUDA"></a>PyTorch和CUDA</h2><p>使用conda查看版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda list | grep cuda</span><br><span class="line">conda list | grep torch</span><br><span class="line">conda list | grep pytorch  <span class="comment"># 使用conda安装的pytorch</span></span><br></pre></td></tr></table></figure>

<p>使用Python查看版本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.utils</span><br><span class="line"><span class="keyword">import</span> torch.utils.cpp_extension</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(torch.__version__) <span class="comment"># 查看torch版本</span></span><br><span class="line"><span class="built_in">print</span>(torch.cuda.is_available()) <span class="comment"># 看安装好的torch和cuda能不能用，也就是看GPU能不能用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(torch.version.cuda) <span class="comment"># 输出一个cuda版本，该cuda版本并不一定是pytorch在实际系统上运行时使用的cuda版本，而是编译该pytorch release版本时使用的cuda版本，也就是官方绑定的cuda版本</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(torch.utils.cpp_extension.CUDA_HOME) <span class="comment">#输出pytorch运行时实际使用的cuda</span></span><br></pre></td></tr></table></figure>

<h3 id="关于Pytorch和CUDA的版本冲突"><a href="#关于Pytorch和CUDA的版本冲突" class="headerlink" title="关于Pytorch和CUDA的版本冲突"></a>关于Pytorch和CUDA的版本冲突</h3><ol>
<li>一定先去算力表查看GPU架构支持的CUDA版本。</li>
<li>找到PyTorch和CUDA的交集，选择版本最高的CUDA。</li>
</ol>
<p><a href="https://download.pytorch.org/whl/torch_stable.html">离线安装</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello Hexo!</title>
    <url>/2024/07/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>服务器开户流程（正式版）</title>
    <url>/2025/05/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E6%88%B7%E6%B5%81%E7%A8%8B%EF%BC%88%E6%AD%A3%E5%BC%8F%E7%89%88%EF%BC%89/</url>
    <content><![CDATA[<h2 id="创建新用户并配置基础信息"><a href="#创建新用户并配置基础信息" class="headerlink" title="创建新用户并配置基础信息"></a>创建新用户并配置基础信息</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 因为服务器的用户路径有点特殊，所以必须提前指明</span><br><span class="line">sudo useradd -m -d /nvme4/home/newuser newuser</span><br><span class="line"></span><br><span class="line"># 设置用户密码</span><br><span class="line">sudo passwd newuser</span><br><span class="line"></span><br><span class="line"># 创建用户软链接</span><br><span class="line">sudo ln -s /nvme4/home/newuser /home/newuser</span><br><span class="line"></span><br><span class="line"># 进入新用户账号</span><br><span class="line">su - newuser</span><br><span class="line"></span><br><span class="line"># 此时可能会出现只有“$”符号的情况，因为配置文件是默认的，退回自己的账户执行以下命令</span><br><span class="line">sudo vi /etc/passwd</span><br></pre></td></tr></table></figure>

<h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 以下全程开启管理员权限</span><br><span class="line"># 将自己路径下的安装包复制到新用户路径下</span><br><span class="line">sudo cp Anaconda3-<span class="number">2023</span>.<span class="number">03</span>-<span class="number">1</span>-Linux-x86_64.sh /nvme4/home/newuser</span><br><span class="line"></span><br><span class="line"># 运行（全程选“yes”）</span><br><span class="line">sudo sh /nvme4/home/newuser/Anaconda3-<span class="number">2023</span>.<span class="number">03</span>-<span class="number">1</span>-Linux-x86_64.sh</span><br><span class="line"></span><br><span class="line"># 刷环境</span><br><span class="line">sudo cp .bashrc /nvme4/home/newuser/.bashrc</span><br><span class="line"></span><br><span class="line"># 进入新用户检查是否有问题，如有问题则修改</span><br><span class="line">vi .bashrc</span><br><span class="line">source .bashrc</span><br><span class="line"></span><br><span class="line"># 回到自己账户下，因为是激活了自己的base环境给别的用户安装的，所以对方的安装路径PREFIX会影响到自己的base环境</span><br><span class="line"># 修改自己的配置文件</span><br><span class="line">vi .bashrc</span><br><span class="line">source .bashrc</span><br><span class="line"></span><br><span class="line"># 修改自己的conda环境</span><br><span class="line">vi ~/.conda/environments.txt</span><br></pre></td></tr></table></figure>

<h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><p>最后注意检查权限，权限不能随便乱给！</p>
]]></content>
  </entry>
  <entry>
    <title>Java打包jar包时出现的奇怪问题</title>
    <url>/2025/08/12/Java%E6%89%93%E5%8C%85jar%E5%8C%85%E6%97%B6%E5%87%BA%E7%8E%B0%E7%9A%84%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="事件起因"><a href="#事件起因" class="headerlink" title="事件起因"></a>事件起因</h2><p>使用 IDEA 打包个人基础项目的时候跟随现阶段所有网上的教程均无效，网上最多的教程就是：点击“文件”，点击“项目结构”，然后在“工件”那里添加一系列设置。然而，跟随着这些操作下来，反复尝试了多次，折腾了几个小时，就是无法成功打包。</p>
<h2 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h2><p>到最后一步：构建 &gt; 构建工件</p>
<p>鼠标点击任何一个菜单条目均无反应。（正常情况应该下方会展示进度条）</p>
<h2 id="临时解决方案"><a href="#临时解决方案" class="headerlink" title="临时解决方案"></a>临时解决方案</h2><p><img src="/2025/08/12/Java%E6%89%93%E5%8C%85jar%E5%8C%85%E6%97%B6%E5%87%BA%E7%8E%B0%E7%9A%84%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/PixPin_2025-08-12_17-56-05.png" alt="PixPin_2025-08-12_17-56-05"></p>
<p>“包含在项目构建中”必须勾选上，这样 IDEA 在编译的时候就会连同 jar 包一起构建了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个问题目前原因未知，好像没人反映过这个问题。</p>
]]></content>
  </entry>
  <entry>
    <title>使用git上传项目到Github</title>
    <url>/2025/08/29/%E4%BD%BF%E7%94%A8git%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0Github/</url>
    <content><![CDATA[<p>git 命令不经常使用，很容易忘记，特意记录在此。</p>
<span id="more"></span>

<h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h2><p>检查本地的凭据管理器，这一步是关键，凭据可以避免重复输入用户名和密码，凭据出现问题可能会导致一些意外错误。</p>
<p>在“开始”菜单直接搜索凭据管理器，找到 git 凭据并确认无误即可。</p>
<h2 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h2><p>在 Github 建立仓库，直接在网站上操作比较清晰直观。</p>
<h2 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h2><p>检查用户名和邮箱标识。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global -l	<span class="comment"># 全局配置检查</span></span><br><span class="line">git config --global user.name <span class="string">&quot;username&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;email&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤 4"></a>步骤 4</h2><p>配置 SSH key。</p>
<h3 id="第-1-步"><a href="#第-1-步" class="headerlink" title="第 1 步"></a>第 1 步</h3><p>检查用户目录下的 .ssh 路径中有没有 id_rsa（私钥）和 id_rsa.pub（公钥）。若有，检查配置账户和当前目标提交账户是否匹配，若匹配，直接转至步骤 4，否则依次完成以下操作。</p>
<h3 id="第-2-步"><a href="#第-2-步" class="headerlink" title="第 2 步"></a>第 2 步</h3><p>删除 id_rsa 和 id_rsa.pub（若文件存在），然后执行以下命令，后续输入全部回车即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;email&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="第-3-步"><a href="#第-3-步" class="headerlink" title="第 3 步"></a>第 3 步</h3><p>在 Github 的设置中配置 SSH key。将 id_rsa.pub 中的内容全部复制过去。</p>
<p>至此完成配置步骤。</p>
<h2 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤 5"></a>步骤 5</h2><p>上传本地项目。</p>
<h3 id="第-1-步-1"><a href="#第-1-步-1" class="headerlink" title="第 1 步"></a>第 1 步</h3><p>git 初始化，完成后在目录下会自动生成 .git 文件夹。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<h3 id="第-2-步-1"><a href="#第-2-步-1" class="headerlink" title="第 2 步"></a>第 2 步</h3><p>切换分支，从 master 分支切换到 main 分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -M main</span><br></pre></td></tr></table></figure>

<h3 id="第-3-步-1"><a href="#第-3-步-1" class="headerlink" title="第 3 步"></a>第 3 步</h3><p>添加文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add README.md	//可选</span><br><span class="line">git add .			//添加当前目录下的所有内容</span><br></pre></td></tr></table></figure>

<h3 id="第-4-步"><a href="#第-4-步" class="headerlink" title="第 4 步"></a>第 4 步</h3><p>提交至仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交代码&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="第-5-步"><a href="#第-5-步" class="headerlink" title="第 5 步"></a>第 5 步</h3><p>关联 Github 仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:xxx/xxx.git</span><br></pre></td></tr></table></figure>

<h3 id="第-6-步"><a href="#第-6-步" class="headerlink" title="第 6 步"></a>第 6 步</h3><p>上传。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
